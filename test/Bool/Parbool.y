-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parbool where
import Absbool
import Lexbool
import ErrM

}

%attributetype 			{MyAttribute a}
%attribute parsetree	{a}

%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 'Boolean' { PT _ (TS _ 1) }
 'Character' { PT _ (TS _ 2) }
 'Integer' { PT _ (TS _ 3) }
 'Real' { PT _ (TS _ 4) }
 'String' { PT _ (TS _ 5) }
 'false' { PT _ (TS _ 6) }
 'true' { PT _ (TS _ 7) }

L_err    { _ }


%%


Program : Boolean { $$ = (Prog $1) } 


Boolean : 'true' { $$ = BTrue } 
  | 'false' { $$ = BFalse}


Type : 'Integer' { $$ = TypeInt } 
  | 'Real' { $$ = TypeFloat }
  | 'Character' { $$ = TypeChar }
  | 'String' { $$ = TypeString }
  | 'Boolean' { $$ = TypeBool }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}