-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parbool where
import Absbool
import Lexbool
import ErrM
}


%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 'false' { PT _ (TS _ 1) }
 'true' { PT _ (TS _ 2) }

L_err    { _ }


%%


Boolean :: { Boolean }
Boolean : 'true' { Boolean_true } 
  | 'false' { Boolean_false }


Program :: { Program }
Program : Boolean { Prog $1 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

