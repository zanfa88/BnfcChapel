{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printchapel where

-- pretty-printer generated by the BNF converter

import Abschapel
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Boolean where
  prt i e = case e of
   Boolean_True  -> prPrec i 0 (concatD [doc (showString "True")])
   Boolean_False  -> prPrec i 0 (concatD [doc (showString "False")])


instance Print Assignment_op where
  prt i e = case e of
   AssgnBase  -> prPrec i 0 (concatD [doc (showString "=")])
   AssgnAdd  -> prPrec i 0 (concatD [doc (showString "+=")])
   AssgnSub  -> prPrec i 0 (concatD [doc (showString "-=")])
   AssgnMul  -> prPrec i 0 (concatD [doc (showString "*=")])
   AssgnDiv  -> prPrec i 0 (concatD [doc (showString "/=")])
   AssgnMod  -> prPrec i 0 (concatD [doc (showString "%=")])
   AssgnExp  -> prPrec i 0 (concatD [doc (showString "**=")])
   AssgnAnd  -> prPrec i 0 (concatD [doc (showString "&=")])
   AssgnOr  -> prPrec i 0 (concatD [doc (showString "|=")])
   AssgnPow  -> prPrec i 0 (concatD [doc (showString "^=")])
   AssgnAnd2  -> prPrec i 0 (concatD [doc (showString "&&=")])
   AssgnOr2  -> prPrec i 0 (concatD [doc (showString "||=")])
   AssgnLeft  -> prPrec i 0 (concatD [doc (showString "<<=")])
   AssgnRight  -> prPrec i 0 (concatD [doc (showString ">>=")])
   AssgnSwap  -> prPrec i 0 (concatD [doc (showString "<=>")])


instance Print Stmt where
  prt i e = case e of
   Asa stmts -> prPrec i 0 (concatD [doc (showString "{") , prt 0 stmts , doc (showString "}")])
   Assgn lexpr assignment_op rexpr -> prPrec i 0 (concatD [prt 0 lexpr , prt 0 assignment_op , prt 0 rexpr , doc (showString ";")])
   Cond stmtcondition -> prPrec i 0 (concatD [prt 0 stmtcondition])
   Select stmtselect -> prPrec i 0 (concatD [prt 0 stmtselect])
   While stmtwhile -> prPrec i 0 (concatD [prt 0 stmtwhile])
   Do stmtdo -> prPrec i 0 (concatD [prt 0 stmtdo])
   For stmtfor -> prPrec i 0 (concatD [prt 0 stmtfor])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print LExpr where
  prt i e = case e of
   Id id -> prPrec i 0 (concatD [prt 0 id])
   ArrayEl lexpr rexpr -> prPrec i 0 (concatD [prt 0 lexpr , doc (showString "[") , prt 20 rexpr , doc (showString "]")])


instance Print RExpr where
  prt i e = case e of
   Eby rexpr0 rexpr -> prPrec i 0 (concatD [prt 0 rexpr0 , doc (showString "by") , prt 2 rexpr])
   Ecount rexpr0 rexpr -> prPrec i 0 (concatD [prt 0 rexpr0 , doc (showString "#") , prt 2 rexpr])
   Ealign rexpr0 rexpr -> prPrec i 0 (concatD [prt 0 rexpr0 , doc (showString "align") , prt 2 rexpr])
   Elor rexpr0 rexpr -> prPrec i 2 (concatD [prt 2 rexpr0 , doc (showString "||") , prt 3 rexpr])
   Eland rexpr0 rexpr -> prPrec i 3 (concatD [prt 3 rexpr0 , doc (showString "&&") , prt 4 rexpr])
   Eeq rexpr0 rexpr -> prPrec i 4 (concatD [prt 4 rexpr0 , doc (showString "==") , prt 5 rexpr])
   Eneq rexpr0 rexpr -> prPrec i 4 (concatD [prt 4 rexpr0 , doc (showString "!=") , prt 5 rexpr])
   Eleq rexpr0 rexpr -> prPrec i 5 (concatD [prt 5 rexpr0 , doc (showString "<=") , prt 6 rexpr])
   Egeq rexpr0 rexpr -> prPrec i 5 (concatD [prt 5 rexpr0 , doc (showString ">=") , prt 6 rexpr])
   El rexpr0 rexpr -> prPrec i 5 (concatD [prt 5 rexpr0 , doc (showString "<") , prt 6 rexpr])
   Eg rexpr0 rexpr -> prPrec i 5 (concatD [prt 5 rexpr0 , doc (showString ">") , prt 6 rexpr])
   Erange rexpr0 rexpr -> prPrec i 6 (concatD [prt 6 rexpr0 , doc (showString "..") , prt 7 rexpr])
   Eadd rexpr0 rexpr -> prPrec i 7 (concatD [prt 7 rexpr0 , doc (showString "+") , prt 8 rexpr])
   Esub rexpr0 rexpr -> prPrec i 7 (concatD [prt 7 rexpr0 , doc (showString "-") , prt 8 rexpr])
   Ebitor rexpr0 rexpr -> prPrec i 8 (concatD [prt 8 rexpr0 , doc (showString "|") , prt 9 rexpr])
   Ebitxor rexpr0 rexpr -> prPrec i 9 (concatD [prt 9 rexpr0 , doc (showString "^") , prt 10 rexpr])
   Ebitand rexpr0 rexpr -> prPrec i 10 (concatD [prt 10 rexpr0 , doc (showString "&") , prt 11 rexpr])
   Eleft rexpr0 rexpr -> prPrec i 11 (concatD [prt 11 rexpr0 , doc (showString "<<") , prt 12 rexpr])
   Eright rexpr0 rexpr -> prPrec i 11 (concatD [prt 11 rexpr0 , doc (showString ">>") , prt 12 rexpr])
   Eupos rexpr -> prPrec i 12 (concatD [doc (showString "+") , prt 12 rexpr])
   Euneg rexpr -> prPrec i 12 (concatD [doc (showString "-") , prt 12 rexpr])
   Emul rexpr0 rexpr -> prPrec i 13 (concatD [prt 13 rexpr0 , doc (showString "*") , prt 14 rexpr])
   Ediv rexpr0 rexpr -> prPrec i 13 (concatD [prt 13 rexpr0 , doc (showString "/") , prt 14 rexpr])
   Emod rexpr0 rexpr -> prPrec i 13 (concatD [prt 13 rexpr0 , doc (showString "%") , prt 14 rexpr])
   Eneg rexpr -> prPrec i 14 (concatD [doc (showString "!") , prt 14 rexpr])
   Ebneg rexpr -> prPrec i 14 (concatD [doc (showString "~") , prt 14 rexpr])
   Ereduce rexpr0 rexpr -> prPrec i 15 (concatD [prt 15 rexpr0 , doc (showString "reduce") , prt 16 rexpr])
   Escan rexpr0 rexpr -> prPrec i 15 (concatD [prt 15 rexpr0 , doc (showString "scan") , prt 16 rexpr])
   Edmapped rexpr0 rexpr -> prPrec i 15 (concatD [prt 15 rexpr0 , doc (showString "dmapped") , prt 16 rexpr])
   Eexp rexpr -> prPrec i 16 (concatD [doc (showString "**") , prt 16 rexpr])
   Ecast rexpr0 rexpr -> prPrec i 17 (concatD [prt 17 rexpr0 , doc (showString ":") , prt 18 rexpr])
   Enew rexpr -> prPrec i 18 (concatD [doc (showString "by") , prt 18 rexpr])
   Emember rexpr0 rexpr -> prPrec i 19 (concatD [prt 19 rexpr0 , doc (showString ".") , prt 20 rexpr])
   Efunc rexpr -> prPrec i 19 (concatD [prt 19 rexpr , doc (showString "(") , doc (showString ")")])
   EfuncPar rexpr param -> prPrec i 19 (concatD [prt 19 rexpr , doc (showString "(") , prt 0 param , doc (showString ")")])
   Eindex rexpr0 rexpr -> prPrec i 19 (concatD [prt 19 rexpr0 , doc (showString "[") , prt 0 rexpr , doc (showString "]")])
   Econs constant -> prPrec i 20 (concatD [prt 0 constant])
   LExpr lexpr -> prPrec i 21 (concatD [prt 0 lexpr])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print StmtCondition where
  prt i e = case e of
   If1 rexpr stmt -> prPrec i 0 (concatD [doc (showString "if") , prt 0 rexpr , doc (showString "then") , prt 0 stmt])
   If2 rexpr stmt -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 rexpr , doc (showString ")") , prt 0 stmt])
   IfElse1 rexpr stmt0 stmt -> prPrec i 0 (concatD [doc (showString "if") , prt 0 rexpr , doc (showString "then") , prt 0 stmt0 , doc (showString "else") , prt 0 stmt])
   IfElse2 rexpr stmt0 stmt -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 rexpr , doc (showString ")") , prt 0 stmt0 , doc (showString "else") , prt 0 stmt])


instance Print StmtSelect where
  prt i e = case e of
   SSelect rexpr swhens stmts -> prPrec i 0 (concatD [doc (showString "select") , prt 0 rexpr , doc (showString "{") , prt 0 swhens , doc (showString "otherwise") , prt 0 stmts , doc (showString "}")])


instance Print SWhen where
  prt i e = case e of
   SWhenDo constant stmt -> prPrec i 0 (concatD [doc (showString "when") , prt 0 constant , doc (showString "do") , prt 0 stmt])
   SWhenNoDo constant stmts -> prPrec i 0 (concatD [doc (showString "when") , prt 0 constant , prt 0 stmts])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print StmtWhile where
  prt i e = case e of
   WhileDo rexpr stmt -> prPrec i 0 (concatD [doc (showString "while") , prt 0 rexpr , doc (showString "do") , prt 0 stmt])
   WhileNoDo rexpr stmts -> prPrec i 0 (concatD [doc (showString "while") , prt 0 rexpr , prt 0 stmts])


instance Print StmtDo where
  prt i e = case e of
   SDo stmts rexpr -> prPrec i 0 (concatD [doc (showString "do") , prt 0 stmts , doc (showString "while") , prt 0 rexpr , doc (showString ";")])


instance Print StmtFor where
  prt i e = case e of
   SForDo rexpr aggr stmt -> prPrec i 0 (concatD [doc (showString "for") , prt 20 rexpr , doc (showString "in") , prt 0 aggr , doc (showString "do") , prt 0 stmt])
   SFor rexpr aggr stmts -> prPrec i 0 (concatD [doc (showString "for") , prt 20 rexpr , doc (showString "in") , prt 0 aggr , prt 0 stmts])


instance Print Aggr where
  prt i e = case e of
   ForAggr constant0 constant -> prPrec i 0 (concatD [prt 0 constant0 , doc (showString "..") , prt 0 constant])


instance Print Param where
  prt i e = case e of
   Pval rexpr -> prPrec i 0 (concatD [prt 20 rexpr])
   Pref rexpr -> prPrec i 0 (concatD [doc (showString "*") , prt 0 rexpr])


instance Print Constant where
  prt i e = case e of
   Int n -> prPrec i 0 (concatD [prt 0 n])
   Bool boolean -> prPrec i 0 (concatD [prt 0 boolean])
   Real d -> prPrec i 0 (concatD [prt 0 d])
   Char c -> prPrec i 0 (concatD [prt 0 c])
   String str -> prPrec i 0 (concatD [prt 0 str])



