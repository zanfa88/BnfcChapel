entrypoints Program ;
rules Boolean ::= "true" | "false" ;

-- Commenti
comment "//" ;
comment "/*" "*/" ;

-- Statement per program: un programma pu√≤ essere una lista di Statement
Prog.       Program ::= [Stmt] ;

-- Statements generali
Assgn.         Stmt     ::= LExpr Assignment_op RExpr ";" ;
Cond.        Stmt     ::= StmtCondition ;
While.        Stmt     ::= StmtWhile ;
Do.            Stmt     ::= StmtDo ;
For.        Stmt     ::= StmtFor ;
Jump.        Stmt     ::= StmtJump ";" ;
Write.        Stmt     ::= StmtWrite ";" ;
Read.        Stmt     ::= StmtRead ";" ;
VarD.        Stmt     ::= StmtVar ";" ;
DFunc.        Stmt     ::= DefFunc ;
CFunc.        Stmt     ::= CallFunc ;

-- Left Expression
Id.            LExpr     ::= Ident ;
ArrayEl.    LExpr    ::=    LExpr "[" RExpr20 "]" ;

-- Right Expressions
Eby. 		RExpr ::= RExpr "by" RExpr2;
Ecount. 	RExpr ::= RExpr "#" RExpr2;
Ealign. 	RExpr ::= RExpr "align" RExpr2; -- ??
Elor. 		RExpr2 ::= RExpr2 "||" RExpr3;
Eland. 		RExpr3 ::= RExpr3 "&&" RExpr4;
Eeq. 		RExpr4 ::= RExpr4 "==" RExpr5;
Eneq. 		RExpr4 ::= RExpr4 "!=" RExpr5;
Eleq. 		RExpr5 ::= RExpr5 "<=" RExpr6;	-- <=
Egeq. 		RExpr5 ::= RExpr5 ">=" RExpr6;	-- >=
El. 		RExpr5 ::= RExpr5 "<" RExpr6;	-- <
Eg. 		RExpr5 ::= RExpr5 ">" RExpr6;	-- >
Erange. 	RExpr6 ::= RExpr6 ".." RExpr7;
Eadd. 		RExpr7 ::= RExpr7 "+" RExpr8;
Esub. 		RExpr7 ::= RExpr7 "-" RExpr8;
Ebitor. 	RExpr8 ::= RExpr8 "|" RExpr9;
Ebitxor. 	RExpr9 	::= RExpr9 "^" RExpr10;
Ebitand. 	RExpr10 ::= RExpr10 "&" RExpr11;
Eleft. 		RExpr11 ::= RExpr11 "<<" RExpr12;
Eright. 	RExpr11 ::= RExpr11 ">>" RExpr12;
Eupos. 		RExpr12 ::= "+" RExpr12;	-- unary positive
Euneg. 		RExpr12 ::= "-" RExpr12;	-- unary negative
Emul. 		RExpr13 ::= RExpr13 "*" RExpr14;
Ediv. 		RExpr13 ::= RExpr13 "/" RExpr14;
Emod. 		RExpr13 ::= RExpr13 "%" RExpr14;
Eneg. 		RExpr14 ::= "!" RExpr14;
Ebneg. 		RExpr14 ::= "~" RExpr14;
Ereduce. 	RExpr15 ::= RExpr15 "reduce" RExpr16;
Escan. 		RExpr15 ::= RExpr15 "scan" RExpr16;
Edmapped. 	RExpr15 ::= RExpr15 "dmapped" RExpr16;
Eexp. 		RExpr16 ::= "**" RExpr16;
Ecast. 		RExpr17 ::= RExpr17 ":" RExpr18;
Enew. 		RExpr18 ::= "by" RExpr18;
Emember.	RExpr19	::=	RExpr19 "." RExpr20;
Efunc.		RExpr19	::= RExpr19 "(" ")";
EfuncPar.	RExpr19	::= RExpr19 "(" [Arg] ")";
Eindex.		RExpr19	::=	RExpr19 "[" RExpr "]";
Econs.      RExpr20    ::= BasicType ;
LExpr.		RExpr21 ::= LExpr ;
coercions	RExpr 21 ;



-- Assegnazioni possibili tra LExpr e RExpr
AssgnBase.       Assignment_op ::= "=";
AssgnBase.       Assignment_op ::= "+=";
AssgnBase.       Assignment_op ::= "-=";
AssgnBase.       Assignment_op ::= "*=";
AssgnBase.       Assignment_op ::= "/=";
AssgnBase.       Assignment_op ::= "%=";
AssgnBase.       Assignment_op ::= "**=";
AssgnBase.       Assignment_op ::= "&=";
AssgnBase.       Assignment_op ::= "&&=";
AssgnBase.       Assignment_op ::= "|=";
AssgnBase.       Assignment_op ::= "||=";
AssgnBase.       Assignment_op ::= "<<=";
AssgnBase.       Assignment_op ::= ">>=";
AssgnBase.       Assignment_op ::= "^=";

-- Statement per write
WriteInt.      StmtWrite ::= "writeInt" "(" Integer  ")" ;
WriteReal.      StmtWrite ::= "writeReal" "(" Double  ")" ;
WriteChar.     StmtWrite ::= "writeChar" "(" Char  ")" ;
WriteString.   StmtWrite ::= "writeString" "(" String  ")" ;

-- Statement per read
ReadInt.      StmtRead ::= "readInt" "(" Integer  ")" ;
ReadReal.      StmtRead ::= "readReal" "(" Double  ")" ;
ReadChar.     StmtRead ::= "readChar" "(" Char  ")" ;
ReadString.   StmtRead ::= "readString" "(" String  ")" ;

-- Statement per le condizioni if
If1.        StmtCondition     ::= "if" RExpr "then" Stmt ;
If2.        StmtCondition     ::= "if" "(" RExpr ")" "{" [Stmt] "}" ;

--  Statement per il while
WhileDo.    StmtWhile     ::= "while" RExpr "do" Stmt ;
WhileDoS.  	StmtWhile     ::= "while" RExpr "{" [Stmt] "}" ;
SDo.        StmtDo     ::= "do" "{" [Stmt] "}" "while" RExpr ";" ;

-- Statement per il for
SForDo.        StmtFor    ::=    "for" Ident "in" Aggr "do" "{" [Stmt] "}" ;
SForDoBloc. StmtFor 	::= "for" Ident "in" Aggr "{" [Stmt] "}" ;
ForAggr.    Aggr     ::= Integer ".." Integer ;

-- Statement per break e continue
Break.        StmtJump ::= "break" ;
Continue.    StmtJump ::= "continue";

-- Dichiarazione variabili
SVarBlock.         StmtVar     ::= "var" [BlockVar];
SVarCon.         StmtVar     ::= "const" Ident ":" Type "=" RExpr ;

SBlockVar.        BlockVar     ::= Ident ":" Type "=" RExpr ;

-- Definizione delle funzioni
SDefFunc.     DefFunc     ::= "function" Ident "(" [Arg] ")" "{" [Stmt] "}" ;

-- Definizione delle chiamate alle funzioni
SCallFunc.     CallFunc     ::= Ident "(" [RExpr] ")" ";" ;

-- Argomenti delle funzioni
SArg.         Arg     ::= Ident ":" Type ;
PArg.         Arg     ::= "*" Ident ":" Type ;

--elementi di base
RInt. 		BasicType	::= Integer ;
RDouble. 	BasicType 	::= Double ;
RChar. 		BasicType 	::= Char ;
RString. 	BasicType 	::= String ;
RBoolean. 	BasicType 	::= Boolean ;

-- booleani
RTrue. 		Boolean 	::= "true" ;
RFalse. 	Boolean 	::= "false" ;

-- tipi 
RTypeInt. 	Type 		::= "int" ;
RTypeDouble. Type 		::= "real" ;
RTypeChar. 	Type 		::= "char" ;
RTypeString. Type 		::= "string" ;
RTypeBool. 	Type 		::= "boolean" ;

-- sepratori e terminatori
separator Stmt 		";" ;
separator RExpr     "," ;
separator BlockVar  "," ;
separator Arg     	"," ;