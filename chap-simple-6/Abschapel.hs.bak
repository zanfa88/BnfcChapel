module Abschapel where

-- Haskell module generated by the BNF converter


newtype Iden = Iden String deriving (Eq,Ord,Show)
data Program =
   RProg [Stmt]
  deriving (Eq,Ord,Show)

data Stmt =
   RAssign LExpr RExpr
 | RDecVar StmtVar
 | Cond StmtCondition
 | While StmtWhile
 | For StmtFor
  deriving (Eq,Ord,Show)

data BasicType =
   RInt Integer
 | RFloat Double
 | RChar Char
 | RString String
 | RBoolean Boolean
  deriving (Eq,Ord,Show)

data LExpr =
   RLExpr Iden
  deriving (Eq,Ord,Show)

data RExpr =
   RAdd RExpr RExpr
 | RGre RExpr RExpr
 | RDiv RExpr RExpr
 | RComp RExpr RExpr
 | RElem BasicType
 | LExprR LExpr
  deriving (Eq,Ord,Show)

data StmtVar =
   RVarBlock [BlockVar]
  deriving (Eq,Ord,Show)

data BlockVar =
   RBlockVar Iden Type RExpr
  deriving (Eq,Ord,Show)

data StmtCondition =
   If1 RExpr Stmt
 | If2 RExpr [Stmt]
  deriving (Eq,Ord,Show)

data StmtWhile =
   WhileDo RExpr Stmt
 | WhileDoS RExpr [Stmt]
  deriving (Eq,Ord,Show)

data StmtFor =
   SForDoBloc RExpr Aggr [Stmt]
  deriving (Eq,Ord,Show)

data Aggr =
   ForAggr Integer Integer
  deriving (Eq,Ord,Show)

data Boolean =
   RTrue
 | RFalse
  deriving (Eq,Ord,Show)

data Type =
   RTypeInt
 | RTypeFloat
 | RTypeChar
 | RTypeString
 | RTypeBool
 | VarNotDec
 | TypeVoid
  deriving (Eq,Ord,Show)

