module Skelchapel where

-- Haskell module generated by the BNF converter

import Abschapel
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIden :: Iden -> Result
transIden x = case x of
  Iden str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  RProg stmts  -> failure x


transStmt :: Stmt -> Result
transStmt x = case x of
  RAssign lexp rexp  -> failure x
  RDecVar stmtvar  -> failure x


transBasicType :: BasicType -> Result
transBasicType x = case x of
  RInt n  -> failure x
  RFloat d  -> failure x
  RChar c  -> failure x
  RString str  -> failure x
  RBoolean boolean  -> failure x


transLExp :: LExp -> Result
transLExp x = case x of
  RLExp iden  -> failure x


transRExp :: RExp -> Result
transRExp x = case x of
  RAdd rexp1 rexp2  -> failure x
  RGre rexp1 rexp2  -> failure x
  RDiv rexp1 rexp2  -> failure x
  RElem basictype  -> failure x


transStmtVar :: StmtVar -> Result
transStmtVar x = case x of
  RVarBlock blockvars  -> failure x


transBlockVar :: BlockVar -> Result
transBlockVar x = case x of
  RBlockVar iden type' rexp  -> failure x


transBoolean :: Boolean -> Result
transBoolean x = case x of
  RTrue  -> failure x
  RFalse  -> failure x


transType :: Type -> Result
transType x = case x of
  RTypeInt  -> failure x
  RTypeFloat  -> failure x
  RTypeChar  -> failure x
  RTypeString  -> failure x
  RTypeBool  -> failure x



