module Abschapel where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Boolean =
   Boolean_True
 | Boolean_False
  deriving (Eq,Ord,Show)

data Assignment_op =
   AssgnBase
 | AssgnAdd
 | AssgnSub
 | AssgnMul
 | AssgnDiv
 | AssgnMod
 | AssgnExp
 | AssgnAnd
 | AssgnOr
 | AssgnPow
 | AssgnAnd2
 | AssgnOr2
 | AssgnLeft
 | AssgnRight
 | AssgnSwap
  deriving (Eq,Ord,Show)

data Stmt =
   Asa [Stmt]
 | Assgn LExpr Assignment_op RExpr
 | Cond StmtCondition
 | Select StmtSelect
 | While StmtWhile
 | Do StmtDo
 | For StmtFor
  deriving (Eq,Ord,Show)

data LExpr =
   Id Ident
 | ArrayEl LExpr RExpr
  deriving (Eq,Ord,Show)

data RExpr =
   Eby RExpr RExpr
 | Ecount RExpr RExpr
 | Ealign RExpr RExpr
 | Elor RExpr RExpr
 | Eland RExpr RExpr
 | Eeq RExpr RExpr
 | Eneq RExpr RExpr
 | Eleq RExpr RExpr
 | Egeq RExpr RExpr
 | El RExpr RExpr
 | Eg RExpr RExpr
 | Erange RExpr RExpr
 | Eadd RExpr RExpr
 | Esub RExpr RExpr
 | Ebitor RExpr RExpr
 | Ebitxor RExpr RExpr
 | Ebitand RExpr RExpr
 | Eleft RExpr RExpr
 | Eright RExpr RExpr
 | Eupos RExpr
 | Euneg RExpr
 | Emul RExpr RExpr
 | Ediv RExpr RExpr
 | Emod RExpr RExpr
 | Eneg RExpr
 | Ebneg RExpr
 | Ereduce RExpr RExpr
 | Escan RExpr RExpr
 | Edmapped RExpr RExpr
 | Eexp RExpr
 | Ecast RExpr RExpr
 | Enew RExpr
 | Emember RExpr RExpr
 | Efunc RExpr
 | EfuncPar RExpr Param
 | Eindex RExpr RExpr
 | Econs Constant
 | LExpr LExpr
  deriving (Eq,Ord,Show)

data StmtCondition =
   If1 RExpr Stmt
 | If2 RExpr Stmt
 | IfElse1 RExpr Stmt Stmt
 | IfElse2 RExpr Stmt Stmt
  deriving (Eq,Ord,Show)

data StmtSelect =
   SSelect RExpr [SWhen] [Stmt]
  deriving (Eq,Ord,Show)

data SWhen =
   SWhenDo Constant Stmt
 | SWhenNoDo Constant [Stmt]
  deriving (Eq,Ord,Show)

data StmtWhile =
   WhileDo RExpr Stmt
 | WhileNoDo RExpr [Stmt]
  deriving (Eq,Ord,Show)

data StmtDo =
   SDo [Stmt] RExpr
  deriving (Eq,Ord,Show)

data StmtFor =
   SForDo RExpr Aggr Stmt
 | SFor RExpr Aggr [Stmt]
  deriving (Eq,Ord,Show)

data Aggr =
   ForAggr Constant Constant
  deriving (Eq,Ord,Show)

data Param =
   Pval RExpr
 | Pref RExpr
  deriving (Eq,Ord,Show)

data Constant =
   Int Integer
 | Bool Boolean
 | Real Double
 | Char Char
 | String String
  deriving (Eq,Ord,Show)

