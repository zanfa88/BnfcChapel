module Abschapel where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Prog [Stmt]
  deriving (Eq,Ord,Show)

data Stmt =
   Assgn LExpr Assignment_op RExpr
 | Cond StmtCondition
 | While StmtWhile
 | Do StmtDo
 | For StmtFor
 | Jump StmtJump
 | Write StmtWrite
 | Read StmtRead
 | VarD StmtVar
 | DFunc DefFunc
 | CFunc CallFunc
  deriving (Eq,Ord,Show)

data LExpr =
   Id Ident
 | ArrayEl LExpr RExpr
  deriving (Eq,Ord,Show)

data RExpr =
   Eby RExpr RExpr
 | Ecount RExpr RExpr
 | Ealign RExpr RExpr
 | Elor RExpr RExpr
 | Eland RExpr RExpr
 | Eeq RExpr RExpr
 | Eneq RExpr RExpr
 | Eleq RExpr RExpr
 | Egeq RExpr RExpr
 | El RExpr RExpr
 | Eg RExpr RExpr
 | Erange RExpr RExpr
 | Eadd RExpr RExpr
 | Esub RExpr RExpr
 | Ebitor RExpr RExpr
 | Ebitxor RExpr RExpr
 | Ebitand RExpr RExpr
 | Eleft RExpr RExpr
 | Eright RExpr RExpr
 | Eupos RExpr
 | Euneg RExpr
 | Emul RExpr RExpr
 | Ediv RExpr RExpr
 | Emod RExpr RExpr
 | Eneg RExpr
 | Ebneg RExpr
 | Ereduce RExpr RExpr
 | Escan RExpr RExpr
 | Edmapped RExpr RExpr
 | Eexp RExpr
 | Ecast RExpr RExpr
 | Enew RExpr
 | Emember RExpr RExpr
 | Efunc RExpr
 | EfuncPar RExpr [Arg]
 | Eindex RExpr RExpr
 | Econs BasicType
 | LExpr LExpr
  deriving (Eq,Ord,Show)

data Assignment_op =
   AssgnBase
  deriving (Eq,Ord,Show)

data StmtWrite =
   WriteInt Integer
 | WriteReal Double
 | WriteChar Char
 | WriteString String
  deriving (Eq,Ord,Show)

data StmtRead =
   ReadInt Integer
 | ReadReal Double
 | ReadChar Char
 | ReadString String
  deriving (Eq,Ord,Show)

data StmtCondition =
   If1 RExpr Stmt
 | If2 RExpr [Stmt]
  deriving (Eq,Ord,Show)

data StmtWhile =
   WhileDo RExpr Stmt
 | WhileDoS RExpr [Stmt]
  deriving (Eq,Ord,Show)

data StmtDo =
   SDo [Stmt] RExpr
  deriving (Eq,Ord,Show)

data StmtFor =
   SForDo Ident Aggr [Stmt]
 | SForDoBloc Ident Aggr [Stmt]
  deriving (Eq,Ord,Show)

data Aggr =
   ForAggr Integer Integer
  deriving (Eq,Ord,Show)

data StmtJump =
   Break
 | Continue
  deriving (Eq,Ord,Show)

data StmtVar =
   SVarBlock [BlockVar]
 | SVarCon Ident Type RExpr
  deriving (Eq,Ord,Show)

data BlockVar =
   SBlockVar Ident Type RExpr
  deriving (Eq,Ord,Show)

data DefFunc =
   SDefFunc Ident [Arg] [Stmt]
  deriving (Eq,Ord,Show)

data CallFunc =
   SCallFunc Ident [RExpr]
  deriving (Eq,Ord,Show)

data Arg =
   SArg Ident Type
 | PArg Ident Type
  deriving (Eq,Ord,Show)

data BasicType =
   RInt Integer
 | RDouble Double
 | RChar Char
 | RString String
 | RBoolean Boolean
  deriving (Eq,Ord,Show)

data Boolean =
   RTrue
 | RFalse
  deriving (Eq,Ord,Show)

data Type =
   RTypeInt
 | RTypeDouble
 | RTypeChar
 | RTypeString
 | RTypeBool
  deriving (Eq,Ord,Show)

