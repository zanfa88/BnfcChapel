-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parchapel where
import Abschapel
import Lexchapel
import ErrM
import Envchapel
}


%attributetype    {MyAttribute a}
%attribute parsetree  {a}
%attribute tip        {BasicType}      -- tipo nodo
%attribute err        {String}    -- errore
%attribute addr       {String}
%attribute envIn      {[Env]}    --contiene l'environment per le variabili in input ad un nodo
%attribute envOut     {[Env]}    --contiene l'environment per le variabili in output da un nodo
%attribute inLoop     {Bool}


%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!=' { PT _ (TS _ 1) }
 '#' { PT _ (TS _ 2) }
 '%' { PT _ (TS _ 3) }
 '&' { PT _ (TS _ 4) }
 '&&' { PT _ (TS _ 5) }
 '(' { PT _ (TS _ 6) }
 ')' { PT _ (TS _ 7) }
 '*' { PT _ (TS _ 8) }
 '+' { PT _ (TS _ 9) }
 ',' { PT _ (TS _ 10) }
 '-' { PT _ (TS _ 11) }
 '..' { PT _ (TS _ 12) }
 '/' { PT _ (TS _ 13) }
 ':' { PT _ (TS _ 14) }
 ';' { PT _ (TS _ 15) }
 '<' { PT _ (TS _ 16) }
 '<=' { PT _ (TS _ 17) }
 '=' { PT _ (TS _ 18) }
 '==' { PT _ (TS _ 19) }
 '>' { PT _ (TS _ 20) }
 '>=' { PT _ (TS _ 21) }
 '[' { PT _ (TS _ 22) }
 ']' { PT _ (TS _ 23) }
 '^' { PT _ (TS _ 24) }
 'bool' { PT _ (TS _ 25) }
 'break' { PT _ (TS _ 26) }
 'complex' { PT _ (TS _ 27) }
 'const' { PT _ (TS _ 28) }
 'continue' { PT _ (TS _ 29) }
 'do' { PT _ (TS _ 30) }
 'false' { PT _ (TS _ 31) }
 'for' { PT _ (TS _ 32) }
 'function' { PT _ (TS _ 33) }
 'if' { PT _ (TS _ 34) }
 'imag' { PT _ (TS _ 35) }
 'in' { PT _ (TS _ 36) }
 'int' { PT _ (TS _ 37) }
 'readInt' { PT _ (TS _ 38) }
 'readReal' { PT _ (TS _ 39) }
 'real' { PT _ (TS _ 40) }
 'string' { PT _ (TS _ 41) }
 'then' { PT _ (TS _ 42) }
 'true' { PT _ (TS _ 43) }
 'uint' { PT _ (TS _ 44) }
 'var' { PT _ (TS _ 45) }
 'while' { PT _ (TS _ 46) }
 'writeInt' { PT _ (TS _ 47) }
 'writeReal' { PT _ (TS _ 48) }
 '{' { PT _ (TS _ 49) }
 '|' { PT _ (TS _ 50) }
 '||' { PT _ (TS _ 51) }
 '}' { PT _ (TS _ 52) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_err    { _ }


%%

Ident   : L_ident  { $$ = Ident $1 }
Integer : L_integ  { $$ = (read ( $1)) :: Integer }
Double  : L_doubl  { $$ = (read ( $1)) :: Double }


Boolean 
  : 'true' { $$ = Boolean_true } 
  | 'false' { $$ = Boolean_false }


Program : ListStmt {  $$        = Prog $1 ;
                      $$.tip    = TypeVoid ;
                      $$.envIn  = [] ;
                      $1.envIn  = $$.envIn ;
                      $$.envOut = $1.envOut ; } 


Stmt 
  : LExpr Assignment_op RExpr ';' { 
        $$ =  Assgn $1 $2 $3 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
        $$.err    = (checkDefVar $1.tip $3.tip) ;
        where ( 
          if ($1.tip == VarNotDec)
            then (Bad $ (prntErrNotDec $1))
            else (   
              if ($$.err == "")
                then (Ok())
                else (Bad $ (prntErrAss $1.tip $3.tip))
            )
        ) ;
      } 
  | StmtCondition { 
        $$ =  Cond $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | StmtWhile { 
        $$ =  While $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | StmtDo { 
        $$ =  Do $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | StmtFor { 
        $$ = For $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | StmtJump ';' { 
        $$ =  Jump $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | StmtWrite ';' { 
        $$ =  Write $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | StmtRead ';' { 
        $$ =  Read $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | StmtVar ';' { 
        $$ =  VarD $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | DefFunc { 
        $$ =  DFunc $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | CallFunc { 
        $$ =  CFunc $1 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }


ListStmt 
  : {- empty -} { 
        $$ = [] ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }
  | Stmt ListStmt { 
        $$ = (:) $1 $2 ;
        $$.tip    = TypeVoid ;
        $1.envIn  = $$.envIn ;
        $$.envOut = $$.envIn ;
    }


LExpr 
  : Ident { 
        $$ = Id $1 ;
        $$.tip  = (getVarTip $$.envIn $1) ; 
        where ( if ($$.tip == VarNotDec)
                  then (Bad $ (prntErrNotDec $1))
                  else (Ok())
        ) ;
    } 
  | LExpr '[' RExpr ']' { $$ = ArrayEl $1 $3 }


RExpr 
  : RExpr '#' RExpr { $$ = Ecount $1 $3 } 
  | RExpr '||' RExpr { $$ = Elor $1 $3 } 
  | RExpr '&&' RExpr { $$ = Eland $1 $3 } 
  | RExpr '==' RExpr { $$ = Eeq $1 $3 } 
  | RExpr '!=' RExpr { $$ = Eneq $1 $3 }
  | RExpr '<=' RExpr { $$ = Eleq $1 $3 } 
  | RExpr '>=' RExpr { $$ = Egeq $1 $3 }
  | RExpr '<' RExpr { $$ = El $1 $3 }
  | RExpr '>' RExpr { $$ = Eg $1 $3 }
  | RExpr '..' RExpr { $$ = Erange $1 $3 } 
  | RExpr '+' RExpr { 
        $$ = Eadd $1 $3 ;
        $$.tip  = $1.tip ;
        $$.err  = (checkEqualType $1.tip $3.tip) ;
        where ( if ($$.err == "") 
          then (Ok())
          else (Bad $ (prntErrAdd $2 ))
        ) ;
    } 
  | RExpr '-' RExpr { $$ = Esub $1 $3 }
  | RExpr '|' RExpr { $$ = Ebitor $1 $3 } 
  | RExpr '^' RExpr { $$ = Ebitxor $1 $3 } 
  | RExpr '&' RExpr { $$ = Ebitand $1 $3 } 
  | '+' RExpr { $$ = Eupos $2 } 
  | '-' RExpr { $$ = Euneg $2 }
  | RExpr '*' RExpr { $$ = Emul $1 $3 } 
  | RExpr '/' RExpr { $$ = Ediv $1 $3 }
  | RExpr '%' RExpr { $$ = Emod $1 $3 }
  | Constant { $$ = Econs $1 } 
  | LExpr { 
        $$ = LExprR $1 ;
        $$.tip  = $1.tip ;
    } 
  | '(' RExpr ')' { $$ = $2 }



Assignment_op : '=' { $$ = AssgnBase } 


StmtWrite 
  : 'writeInt' '(' Integer ')' { $$ = WriteInt $3 } 
  | 'writeReal' '(' Double ')' { $$ = WriteReal $3 }


StmtRead : 'readInt' '(' Integer ')' { $$ = ReadInt $3 } 
  | 'readReal' '(' Double ')' { $$ = ReadReal $3 }


StmtCondition : 'if' RExpr 'then' Stmt { $$ = If1 $2 $4 } 
  | 'if' '(' RExpr ')' '{' ListStmt '}' { $$ = If2 $3 $6 }


StmtWhile 
  : 'while' RExpr 'do' Stmt { 
        $$ = WhileDo $2 $4 ;
        $$.inLoop = True;
    } 


StmtDo : 'do' '{' ListStmt '}' 'while' RExpr ';' { $$ = SDo $3 $6 } 


StmtFor : 'for' RExpr 'in' Aggr 'do' '{' ListStmt '}' { $$ = SForDo $2 $4 $7 } 


Aggr : Constant '..' Constant { $$ = ForAggr $1 $3 } 


StmtJump 
  : 'break' { 
        $$ = Break ;
        $$.envIn = $$.envOut;
        $$.err = (if ($$.inLoop) 
          then ""
          else "Syntax error: break statement not in a loop statement! At " ++ tokenPos2 $1
        );
        where (if ($$.inLoop) 
          then Ok()
          else Bad $ ($$.err)
        );
    } 
  | 'continue' { 
        $$ = Continue ;
        $$.envIn = $$.envOut;
        $$.err = (if ($$.inLoop) 
          then ""
          else "Syntax error: continue statement not in a loop statement! At " ++ tokenPos2 $1
        );
        where (if ($$.inLoop) 
          then Ok()
          else Bad $ ($$.err)
        );
    }


Param 
  : RExpr { $$ = Pval $1 } 
  | '*' RExpr { $$ = Pref $2 }


Constant : Integer { $$ = Int $1 } 


StmtVar : 'var' ListBlockVar { $$ = SVarBlock $2 } 
  | 'const' ListBlockVar { $$ = SVarCon $2 }


BlockVar : Ident ':' TypeSpec '=' RExpr { $$ = SBlockVar $1 $3 $5 } 


DefFunc : 'function' Ident '(' ListArg ')' '{' ListStmt '}' { $$ = SDefFunc $2 $4 $7 } 


CallFunc : Ident '(' ListRExpr ')' ';' { $$ = SCallFunc $1 $3 } 


Arg : Ident ':' TypeSpec { $$ = SArg $1 $3 } 


TypeSpec : BasicType { $$ = BasTyp $1 } 


BasicType : 'bool' { $$ = BasicType_bool } 
  | 'uint' { $$ = BasicType_uint }
  | 'int' { $$ = BasicType_int }
  | 'real' { $$ = BasicType_real }
  | 'imag' { $$ = BasicType_imag }
  | 'complex' { $$ = BasicType_complex }
  | 'string' { $$ = BasicType_string }


ListRExpr : {- empty -} { $$ = [] } 
  | RExpr { $$ = (:[]) $1 }
  | RExpr ',' ListRExpr { $$ = (:) $1 $3 }


ListBlockVar : {- empty -} { $$ = [] } 
  | BlockVar { $$ = (:[]) $1 }
  | BlockVar ',' ListBlockVar { $$ = (:) $1 $3 }


ListArg 
  : {- empty -} { $$ = [] } 
  | Arg { $$ = (:[]) $1 }
  | Arg ',' ListArg { $$ = (:) $1 $3 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

